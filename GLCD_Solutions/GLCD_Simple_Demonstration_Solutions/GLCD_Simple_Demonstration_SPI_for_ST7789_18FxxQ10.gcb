'''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the ST7789.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the ST7789 GLCD capabilities.
'''This program draws lines, boxes, circles and prints strings and numbers.
'''The ST7789 controller a  graphical OLED, suitable for a lot of various projects.  The ST7789 is typically a 3v3 device - please check the datasheet before uing 5v0
'''The display has an active display surface of 1.5 inches , and a 240*240 pixel resolution.
'''The display is easy to interface, using a SPI type of communication.   The SPI uses SPI mode 3 and therefore the GLCD may not interoprate with other SPI devices.
'''
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
'''
'''@author  EvanV
'''@licence GPL
'''@version 1.5
'''@date    27.3.21
'''********************************************************************************


#chip 18F27Q10
#option Explicit

    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.6.2
    'PinManager data: v1.81.0
    'Generated for 18F27Q10
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18F27Q10

    Sub InitPPS
      #IFDEF ST7789_HardwareSPI
            'Module: MSSP1
            RC5PPS = 0x000E    'SDO1 > RC5
            RC3PPS = 0x000D    'SCK1 > RC3
            SSPCLKPPS = 0x0013    'RC3 > SCK1 (bi-directional)

      #ENDIF
    End Sub
    'Template comment at the end of the config file



' ********************** Setup the GLCD ************************************************
#INCLUDE <glcd.h>
#define GLCD_TYPE GLCD_TYPE_ST7789_240_240

'This is a PPS chip, so, need to make the DO/SDO & SCK match the PPS assignments
#DEFINE GLCD_DO portc.5
#DEFINE GLCD_SCK portc.3
'Additinal pin assignments for GLCD
#DEFINE GLCD_DC     portA.3
#DEFINE GLCD_RESET  portA.1
'It is optional on the ST7789 to set the GLCD_CS... therefore, here but commented out
'#DEFINE GLCD_CS porte.0

'Uncomment out the next line... enable or disable the PPS!!!
#DEFINE ST7789_HardwareSPI ' remove/comment out if you want to use software SPI.0



' ********************** DEMO REALLY STARTS HERE ************************************************

    'GLCD selected extension font set. ASCII characters 31-254, the extended font uses 1358 bytes of program memory
    #define GLCD_EXTENDEDFONTSET1
    GLCDfntDefaultsize = 1

    'GLCDCLS  supports GLCDBackground as default
    'GLCDCLS  also support passing color parameter.
    'GLCDCLS [color]
    GLCDRotate ( Landscape_rev )     ' optionally you can rotate the screen.

    Dim CCOUNT, BYTENUMBER, OLDFONT, OLDFONT as Byte

    CCount = 31
    dim longNumber as long
    longNumber = 0 ' max value = 4294967290
    dim wordNumber as Word
    wordNumber = 0
    byteNumber = 0

    'Do some basics

    repeat 2

            GLCDRotate ( Landscape_rev )
            GLCDCLS TFT_BLUE

            GLCDForeground = TFT_WHITE
            GLCDfntDefaultsize = 1
            GLCDPrint ( 2, 2, "GLCDPrint" )


            GLCDForeground = TFT_WHITE
            GLCDfntDefaultsize = 2
            GLCDPrint ( 2, 12, "GLCDPrint String" )


            GLCDForeground = TFT_YELLOW
            GLCDfntDefaultsize = 3
            GLCDPrint ( 2,30, "GLCDPrint" )

            longNumber = 0xFFFFFFFF
            wordNumber = 0xFFFF
            byteNumber = 0xFF

            GLCDRotate ( Portrait )
            GLCDCLS TFT_WHITE

            GLCDForeground = TFT_MAROON
            GLCDfntDefaultsize = 1
            GLCDPrint ( 2, 2, bytenumber )


            GLCDForeground = TFT_BLACK
            GLCDfntDefaultsize = 2
            GLCDPrint ( 2, 12, wordNumber )


            GLCDForeground = TFT_CYAN
            GLCDfntDefaultsize = 3
            GLCDPrint ( 2,30, longnumber )

            wait 2 s

    end Repeat



  GLCDCLS TFT_BLUE
  'Set font size... this also selects the demo routine......
  GLCDfntDefaultsize = 1
  longNumber = 0 ' max value = 4294967290
  wordNumber = 0
  byteNumber = 0

    'Using the global variable GLCDfntDefaultsize to show the different capabilities
    Select Case GLCDfntDefaultsize

    Case 1

      ShowCase1

    Case 2

      ShowCase2

    Case 3

      GLCDDrawString (2, 1, "GLCD font")
      GLCDDrawString (2, 25, "size = 3")
      box 0,0,GLCD_WIDTH-1, GLCD_HEIGHT-1, TFT_BLUE
      box GLCD_WIDTH-5, GLCD_HEIGHT-5,GLCD_WIDTH-1, GLCD_HEIGHT-1, TFT_WHITE

  End Select

end


sub ShowCase1

        GLCDRotate ( Portrait )

        GLCDDrawString (2, 1, "GCB", TFT_WHITE )
        GLCDDrawString (56,1,"v.9807", TFT_YELLOW )
        GLCDDrawString (2, 16, "DrawStr", TFT_WHITE )

        GLCDDrawString ( 60, 31, "Long Number" )
        GLCDDrawString ( 60, 39, "Word Number" )
        GLCDDrawString ( 60, 47, "Byte Number" )

        GLCDDrawString ( 74, 16, "Asc:" )

        box 0,0,GLCD_WIDTH-1, GLCD_HEIGHT-1, TFT_YELLOW
        box GLCD_WIDTH-5, GLCD_HEIGHT-5,GLCD_WIDTH-1, GLCD_HEIGHT-1, TFT_WHITE

        Circle( GLCD_WIDTH/2, GLCD_HEIGHT/2, 50, TFT_WHITE )            ;center
        FilledCircle( GLCD_WIDTH/2, GLCD_HEIGHT/2, 25, TFT_LIGHTGREY     )

        line 0,  GLCD_HEIGHT-1 , GLCD_WIDTH/2 +100,  (GLCD_HEIGHT /2) - 50, TFT_CYAN
        line  0, (GLCD_HEIGHT /2) - 50, GLCD_WIDTH/2 +100, (GLCD_HEIGHT /2) - 50, TFT_CYAN

        filledbox 2,GLCD_HEIGHT/2+10,42,GLCD_HEIGHT/2+50, TFT_RED

        oldfont = GLCDfntDefaultsize
        GLCDfntDefaultsize = 3
        GLCDDrawString ( 42, GLCD_HEIGHT - 30 , "ST7789" , TFT_WHITE )
        GLCDfntDefaultsize = 1


        GLCDDrawString ( GLCD_WIDTH - 60, 2 , "Mar 2021" , TFT_WHITE )
        #ifdef ST7789_HardwareSPI
            GLCDDrawString ( GLCD_WIDTH - 46, 10 , "HW SPI" , TFT_WHITE )
        #endif

        #ifndef ST7789_HardwareSPI
            GLCDDrawString ( GLCD_WIDTH - 46, 10 , "SW SPI" , TFT_WHITE )
        #endif

        'Revert the font size
        GLCDfntDefaultsize = oldfont
        GLCDForeground = TFT_WHITE

        DO forever

            GLCDPrint ( 144 , 31, longNumber)
            GLCDPrint ( 144 , 39, pad( str(wordnumber),5))
            GLCDPrint ( 144 , 47, pad( str(bytenumber),3))

            GLCDDrawChar(54, 16, CCount )
            Box 52,15,62,26, TFT_WHITE                'Draw a box around the Char below

            GLCDDrawString ( 100, 16 , pad( str(CCount),3) )

            CCount++
            if CCount = 0 then CCount = 31
            if CCount = 128 then CCount = 192
            longNumber = longNumber + 7

            wordNumber = wordNumber + 3
            byteNumber++

        LOOP

end sub

sub ShowCase2

        GLCDRotate ( Landscape_rev )

        GLCDDrawString (2, 1, "GCB",TFT_WHITE)
        GLCDDrawString (56,1,"v.9807",TFT_YELLOW)
        GLCDDrawString (2, 18, "DrawStr",TFT_WHITE)

        GLCDDrawString ( 2, 52, "Long:" )
        GLCDDrawString ( 2, 70, "Word:" )
        GLCDDrawString ( 2, 88, "Byte:" )

        GLCDDrawString ( 128, 18, "Asc:"+"  " )

        box 0,0,GLCD_WIDTH-1, GLCD_HEIGHT-1, TFT_YELLOW
        box GLCD_WIDTH-5, GLCD_HEIGHT-5,GLCD_WIDTH-1, GLCD_HEIGHT-1, TFT_WHITE

        Circle( GLCD_WIDTH/2, GLCD_HEIGHT/2, 50, TFT_LIGHTGREY    )            ;center
        FilledCircle( GLCD_WIDTH/2, GLCD_HEIGHT/2, 25, TFT_LIGHTGREY     )

        line 0,  GLCD_HEIGHT-1 , GLCD_WIDTH/2 +100,  (GLCD_HEIGHT /2) - 50, TFT_CYAN
        line  0, (GLCD_HEIGHT /2) - 50, GLCD_WIDTH/2 +100, (GLCD_HEIGHT /2) - 50, TFT_CYAN

        filledbox 2,GLCD_HEIGHT/2+10,42,GLCD_HEIGHT/2+50, TFT_RED

        oldfont = GLCDfntDefaultsize
        GLCDfntDefaultsize = 3
        GLCDDrawString ( 50, GLCD_HEIGHT - 30 , glcd_type_string , TFT_WHITE )

        GLCDfntDefaultsize = 1
        GLCDDrawString ( GLCD_WIDTH - 60, 2 , "Mar 2021" , TFT_WHITE )

        #ifdef ST7789_HardwareSPI
            GLCDDrawString ( GLCD_WIDTH - 46, 11 , "HW SPI" , TFT_WHITE )
        #endif

        #ifndef ST7789_HardwareSPI
            GLCDDrawString ( GLCD_WIDTH - 46, 11 , "SW SPI" , TFT_WHITE )
        #endif

        'Revert the font size
        GLCDfntDefaultsize = oldfont
        GLCDForeground = TFT_WHITE
        GLCDPrintLargeFont ( 40 , GLCD_HEIGHT - 60 , "Great Cow BASIC" )

        DO forever

          GLCDPrint ( 64 , 52, longNumber)
          GLCDPrint ( 64 , 70, pad( str(wordnumber),5))
          GLCDPrint ( 64 , 88, pad( str(bytenumber),3))

          GLCDDrawChar(101, 20, CCount )
          Box 97,19,116,41, TFT_WHITE               'Draw a box around the Char below

          GLCDDrawString ( 181, 20 , pad( str(CCount),3) )

          CCount++
          if CCount = 0 then CCount = 31
          if CCount = 128 then CCount = 192
          longNumber = longNumber + 7
          wordNumber = wordNumber + 3
          byteNumber++

        LOOP
end sub




/*
The macro below shows how to 'hook' the methods in the low level libraries.

This has the benefit not changing the low level libraries whioh means upgrades are very simple as your optimised code is in the program.

Simply define a constant that points to your new method.

The hooks FastHWSPITransfer and points to a Macro called myFastHWSPITransfer.  A macro is inline code therefore may be faster, and, you can change the macro to meet your own needs.

myFastHWSPITransfer is copied from HWSPI.H - see inline for deleted items improve performance.

*/

#define FastHWSPITransfer myFastHWSPITransfer

'Sub to handle SPI data send - Master mode only
Macro myFastHWSPITransfer( In SPITxData )
  'Master mode only
  #ifdef PIC

    #ifdef Var(SSPBUF)
        'Clear WCOL
'        Set SSPCON1.WCOL Off               ' Deleted in this MACRO - this exists in the low level library

        'Put byte to send into buffer
        'Will start transfer
        SSPBUF = SPITxData
        'Same for master and slave
        Wait While SSPSTAT.BF = Off
'        Set SSPSTAT.BF Off                 ' Deleted in this MACRO - this exists in the low level library


        #if ChipFamily = 16
           'Handle 18F chips
          SPIRxData = SSPBUF
        #endif

    #endif

    #ifdef Var(SPI1CON0)

      'One byte transfer count
      SPI1TCNTL = 1
      SPI1TXB = SPITxData

      wait while SPI1RXIF = SPI_RX_IN_PROGRESS
      SPIRxData = SPI1RXB

    #endif

  #endif

  #ifdef AVR
    'Master mode only
   #IF ChipFamily <> 122
     Do
       SPDR = SPITxData
     Loop While SPSR.WCOL
   #ENDIF
   #IF ChipFamily = 122
     SPFR = SPFR & 0x44 'setup  RDEMPT and WREMPT simutanously to clear buffer
     SPDR = SPITxData
     Repeat SPIDELAY_SCRIPT_MASTER
       nop
     End Repeat
   #ENDIF

    'Same for master and slave
    #IF ChipFamily <> 122
      Wait While SPSR.SPIF = Off
    #ENDIF

    #IF ChipFamily = 122
      'Chipfmaily 122 has different registers.... and, is so fast...
      Wait While ( SPSR.SPIF = Off and RDEMPT = 0 )
    #ENDIF

  #endif

End Macro

