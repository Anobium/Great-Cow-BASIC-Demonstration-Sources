   #chip mega328p, 16
   #include <uno_mega328p.h>
   #option explicit

 ' USART settings
   #define USART_BAUD_RATE 57600
   #define USART_DELAY 0 ms
   #define USART_BLOCKING
   #define USART_TX_BLOCKING


    'SD card attached to SPI bus as follows:
    '
    'UNO:       MOSI - pin 11, MISO - pin 12, CLK - pin 13, CS - pin 4 (CS pin can be changed) and pin #10 (SS) must be an output
    'Mega:      MOSI - pin 51, MISO - pin 50, CLK - pin 52, CS - pin 4 (CS pin can be changed) and pin #52 (SS) must be an output
    'Leonardo:  Connect to hardware SPI via the ICSP header

    #define SPISRAM_CS            DIGITAL_5         'Also known as SS, or Slave Select
    #define SPISRAM_SCK           DIGITAL_13        'Also known as CLK
    #define SPISRAM_DO            DIGITAL_11        'Also known as MOSI
    #define SPISRAM_DI            DIGITAL_12        'Also known as MISO

    #define SPISRAM_HARDWARESPI
    #define SPISRAM_TYPE          SRAM_23LC1024

    #define HWSPIMode MASTERULTRAFAST              'MASTERSLOW | MASTER | MASTERFAST | MASTERULTRAFAST


'********************************************************************************

'Main program

    'Wait 2 seconds to open the serial terminal
    wait 2 s

    HSerPrintCRLF 2
    HSerPrint "Writing..."
    HSerPrintCRLF
    For EPD_Ind_raw=0 to SPISRAM_CAPACITY - 1 #IGNOREWARNING
      SRAMWrite ( [long]EPD_Ind_raw, EPD_Ind_raw and 255 )
    Next


    dim spirambyteread as Byte
    spirambyteread = 11
    HSerPrintCRLF 2
    dim EPD_Ind_raw as long
    HSerPrint "Reading..."
    HSerPrintCRLF
    For EPD_Ind_raw=0 to SPISRAM_CAPACITY - 1 #IGNOREWARNING
      'choose one....
      'SRAMRead (  EPD_Ind_raw, spirambyteread )
    'or, as a function
      spirambyteread = SRAMRead (  EPD_Ind_raw )

      if spirambyteread = ( EPD_Ind_raw and 255 ) then
          HSerPrint hex(spirambyteread)
      else
          HSerPrint "**"
      end if
      HSerPrint ":"
    Next
    HSerPrintCRLF
    HSerPrint "Wait..."
    HSerPrintCRLF
    Wait 2 s

    HSerPrint "Rewriting to 0x00 ..."
    HSerPrintCRLF
    For EPD_Ind_raw=0 to SPISRAM_CAPACITY - 1  #IGNOREWARNING
      SRAMWrite ( [long]EPD_Ind_raw, 0 )
    Next

    Dim errorcount as long
    errorcount = 0
    For EPD_Ind_raw=0 to SPISRAM_CAPACITY - 1  #IGNOREWARNING
      SRAMRead (  EPD_Ind_raw, spirambyteread )
      if spirambyteread <> 0 then
          errorcount++
      end if
    Next
    HSerPrint "Error Count (should be 0) = "
    HSerPrint errorcount
    HSerPrintCRLF
    HSerPrint "End..."
    HSerPrintCRLF

do

loop
