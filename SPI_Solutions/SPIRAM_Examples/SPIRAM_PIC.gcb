'Results should look like this
'
'    Writing...SPISRAM_CAPACITY = 0x020000
'    Error Count (should be 0) = 0
'
'
'    Reading...
'    Error Count (should be 0) = 0
'
'    Wait...
'    Rewriting to 0x00 ...
'    Error Count (should be 0) = 0
'    End...


     'Chip Settings.
    #chip 18F47k42, 64
    #config MCLRE = ON
    #option explicit


    'PPS Tool version: 0.0.5.27
    'PinManager data: v1.78
    'Generated for 18F47K42
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18F47K42

    Sub InitPPS
         'This has been added to turn off PPS SPI when in SPI software mode
            #ifdef SPISRAM_HARDWARESPI
                'Module: SPI1
                RC3PPS = 0x001E    'SCK1 > RC3
                SPI1SCKPPS = 0x0013    'RC3 > SCK1 (bi-directional)
                RC5PPS = 0x001F    'SDO1 > RC5
                SPI1SDIPPS = 0x0014    'RC4 > SDI1
                'Module: UART pin directions
            #endif
            'Module: UART pin directions
            Dir PORTC.6 Out    ' Make TX1 pin an output
            'Module: UART1
            RC6PPS = 0x0013    'TX1 > RC6
    End Sub
    'Template comment at the end of the config file


 ' USART settings
   #define USART_BAUD_RATE 57600
   #define USART_DELAY 0 ms
   #define USART_BLOCKING
   #define USART_TX_BLOCKING

    #define SPISRAM_CS            Porta.2           'Also known as SS, or Slave Select
    #define SPISRAM_SCK           Portc.3           'Also known as CLK
    #define SPISRAM_DO            Portc.5           'Also known as MOSI
    #define SPISRAM_DI            Portc.4           'Also known as MISO

    #define SPISRAM_HARDWARESPI
    #define SPISRAM_TYPE          SRAM_23LC1024

    #define HWSPIMode MASTER

'********************************************************************************

'Main program

    'Wait 2 seconds to open the serial terminal
    wait 2 s
    dim sizeofSPIRAM as long
    sizeofSPIRAM = SPISRAM_CAPACITY
    HSerPrintCRLF 2
    HSerPrint "Writing...SPISRAM_CAPACITY = 0x"
    HSerPrint hex(sizeofSPIRAM_U)
    HSerPrint hex(sizeofSPIRAM_H)
    HSerPrint hex(sizeofSPIRAM)
    HSerPrintCRLF
    wait 100 ms

    Dim errorcount as long
    errorcount = 0
    dim EPD_Ind_raw as long
    For EPD_Ind_raw=0 to SPISRAM_CAPACITY - 1  #IGNOREWARNING
      SRAMWrite ( [long]EPD_Ind_raw, EPD_Ind_raw and 255 )
      if SRAMRead (  [long]EPD_Ind_raw ) <> ( EPD_Ind_raw and 255 ) then
          errorcount++
      end if
    Next
    HSerPrint "Error Count (should be 0) = "
    HSerPrint errorcount
    HSerPrintCRLF


    dim spirambyteread as Byte
    spirambyteread = 11  'could be any number....
    HSerPrintCRLF 2

    HSerPrint "Reading..."
    HSerPrintCRLF
    errorcount = 0
    For EPD_Ind_raw=0 to SPISRAM_CAPACITY - 1  #IGNOREWARNING
      'choose one....
      'SRAMRead (  EPD_Ind_raw, spirambyteread )
    'or, as a function
      spirambyteread = SRAMRead (  [long]EPD_Ind_raw )

      if spirambyteread <> ( [long]EPD_Ind_raw and 255 ) then
          errorcount++
      end if

    Next
    HSerPrint "Error Count (should be 0) = "
    HSerPrint errorcount
    HSerPrintCRLF
    HSerPrintCRLF
    HSerPrint "Wait..."
    HSerPrintCRLF
    Wait 2 s

    HSerPrint "Rewriting to 0x00 ..."
    HSerPrintCRLF
    For EPD_Ind_raw=0 to SPISRAM_CAPACITY - 1  #IGNOREWARNING
      SRAMWrite ( [long]EPD_Ind_raw, 0 )
    Next

    errorcount = 0
    For EPD_Ind_raw=0 to SPISRAM_CAPACITY - 1  #IGNOREWARNING
      SRAMRead (  [long]EPD_Ind_raw, spirambyteread )
      if spirambyteread <> 0 then
          errorcount++
      end if
    Next
    HSerPrint "Error Count (should be 0) = "
    HSerPrint errorcount
    HSerPrintCRLF
    HSerPrint "End..."
    HSerPrintCRLF

do

loop
