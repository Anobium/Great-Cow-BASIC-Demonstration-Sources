'''A program  for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program shows how to create and use table strings.
'''
'''The example menu system is shown on a serial terminal.
'''
'''The method to show the menu strings looks up the pointer address stored in ProgMem and the length of the menu string.
'''The method calculates the correct address in ProgMem to obtain the StrStart and StrEnd variables then the correct table string is returned using these variables.
'''The interesting insight into this method...the initialTables methods examines the table of strings, indexing on \0 to create the Progmem index data.
'''
'''The method is fast but does require a microcontroller that supports self-writing.
'''
'''
'''@author     EvanV
'''@licence    GPL
'''@version    1.00
'''@date       19/03/2021
'''********************************************************************************

; ----- Configuration
#chip 16f18855, 16
#option explicit

    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.6.2
    'PinManager data: v1.81.0
    'Generated for 16lf18855
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 16lf18855

    Sub InitPPS

            'Module: EUSART
            RC0PPS = 0x0010    'TX > RC0

    End Sub
    'Template comment at the end of the config file


#define USART_BAUD_RATE 9600
#define USART_TX_BLOCKING '< wait for tx done
#define TBLSTRNUM 20      '< num of strings




    Dim Result as String
    Dim Result0 as String     '< for bug in older compiler <= V0.098.00
    Dim StrNum as Byte        '< num of string in table
    Dim StrIndex as Word      '< String to get
    Dim _Index as Byte
    Dim Lp1 as Word           '< loops
    Dim Item as Byte          '< byte from table
    Dim StrStart as Word
    Dim StrEnd as Word


    #SCRIPT
        'Calculate the address for the index in ProgMem
        PROGMEMSTORELOCATION = INT(ChipWORDS - INT(  2 * TBLSTRNUM ))
        PROGMEMSTORELOCATION_Hi = INT(PROGMEMSTORELOCATION / 256)
        PROGMEMSTORELOCATION_Lo = PROGMEMSTORELOCATION and 255
    #ENDSCRIPT

    HSerPrintCRLF 2
    HSerPrint ChipNameStr
    HSerPrintCRLF
    HSerPrint "Based Address of Indexes is 0x"
    HSerPrint hex(PROGMEMSTORELOCATION_Hi)
    HSerPrint hex(PROGMEMSTORELOCATION_Lo)
    HSerPrintCRLF

    InitialiseTables

'---------------------------
Do
    ShowMenuItems
    wait 10 s
'   Do other stuff
loop
'---------------------------


Sub ShowMenuItems

          HserPrintCRLF 2

          For _Index = 1 to TBLSTRNUM
            GetTableString ( _Index )
            HSerPrint leftpad( str(_Index ), 2 ," ") +  ")"
            HSerPrint Result
            HserPrintCRLF
          Next
          HserPrintCRLF
          HserPrint "----------------"
          HserPrintCRLF

End Sub


Sub GetTableString  ( _Index )
          Result = ""
          ProgramRead ( PROGMEMSTORELOCATION + ( ( _Index -1 )* 2 ), StrStart )
          ProgramRead ( PROGMEMSTORELOCATION + ( ( _Index -1 )* 2 )+1, StrEnd )
          ' Some debug, can be removed
'                            HSerPrint StrStart
'                            HSerPrint ","
'                            HSerPrint StrEnd
'                            HSerPrintCRLF
          For Lp1 = StrStart to StrStart + StrEnd
             ReadTable MnuTxt1, Lp1, Item  '< Readtable data item
             Result0 = Result + Chr(Item)
             Result = Result0
          Next

End Sub

Sub InitialiseTables


          Dim TableSize as word
          ReadTable MnuTxt1, 0, TableSize
          StrIndex = 0
          StrStart = 1

          For Lp1 = 1 to  TableSize
              ReadTable MnuTxt1, Lp1, StrEnd
              If StrEnd = 0 then

                  'load the progrem
                  ProgramWrite ( PROGMEMSTORELOCATION + ( StrIndex * 2 ), StrStart )
                  ProgramWrite ( PROGMEMSTORELOCATION + ( StrIndex * 2 )+1, Lp1-StrStart-1 )  'Length
                  StrIndex =  StrIndex + 1
                  StrStart = Lp1+1

              End if
          Next

End sub

    '==========  TABLES ===============

    Table  MnuTxt1  ' Sub1 Menu
       'These are csv string lINES
       "Menu Item \"1\"\0","Menu Item \"2\"\0","Menu Item 3\0","Menu Item 4\0","Menu Item 5\0"  ' SUB1
       "Config1 Item 1\0", "Config1 Item 2\0", "Config1 Item 3\0", "Config1 Item 4\0"         ' SUB2
       "DataLog Item 1\0", "DataLog Item 2\0", "DataLog Item 3\0"                          ' SUB3
       "Diag Item 1\0", "Diag Item 2\0", "Diag Item 3\0", "Diag Item 4\0"                      ' SUB4
       "Help Item 1\0", "Help Item 2\0", "Help Item 3\0" , "Help Item 4\0"   'SUB5
    End Table
