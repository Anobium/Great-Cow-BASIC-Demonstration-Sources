'''
'''  This demonstration shows the I2C devices attached the microcontroller, this program support the Microchip I2C module.
'''
'''  I2C device required a data bus and a clock bus, devices also required an input voltage and 0v.
'''   I2C data bus is connected to PortC.4
'''   I2C clock bus is connected to PortC.3
'''   Serial output is connected, as previously, to PortC.6
'''
'''  Connect your IC2 devices and see the results on the serial terminal.
'''
'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.02
'''@date    09.07.2020
' ----- Configuration

'Chip Settings.
#CHIP 18f26q43, 16
#OPTION Explicit

    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.6.1
    'PinManager data: v1.79.0
    'Generated for 18f26q43
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18f26q43

    Sub InitPPS

            'Module: I2C1
            RC4PPS = 0x0038    'SDA1 > RC4
            I2C1SDAPPS = 0x0014    'RC4 > SDA1 (bi-directional)
            RC3PPS = 0x0037    'SCL1 > RC3
            I2C1SCLPPS = 0x0013    'RC3 > SCL1 (bi-directional)
            'Module: UART pin directions
            Dir PORTC.6 Out    ' Make TX1 pin an output
            'Module: UART1
            RC6PPS = 0x0020    'TX1 > RC6

    End Sub
    'Template comment at the end of the config file

'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    --------IN-LED--LED-LED LED -----
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----TX---------------------------
''-----------------------------------------
''

'' ------------------PORTE-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----------------RST--------------
''-----------------------------------------
''

'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDD1 PORTB.1
#DEFINE LEDD2 PORTB.2
#DEFINE LEDD3 PORTB.3
#DEFINE LEDD4 PORTB.4
#DEFINE LEDPORT LATB


Dir     LEDD1         Out
Dir     LEDD2         Out
Dir     LEDD3         Out
Dir     LEDD4         Out

#DEFINE POTENTIOMETER PORTA.0
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTB.5
Dir     SWITCHIN      In

'Setup Serial port
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_TX_BLOCKING


' Define I2C settings
#DEFINE HI2C_BAUD_RATE 125
#DEFINE HI2C_DATA PORTC.4
#DEFINE HI2C_CLOCK PORTC.3
'Initialise I2C - note for the I2C module the ports need to be set to IN
Dir HI2C_DATA Out
Dir HI2C_CLOCK Out


'For this solution we can set the TSCL period to Zero as the Stop condition must be held for TSCL after Stop transition
'    #define HI2CITSCLWaitPeriod 0

'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.

Dim DeviceID As Byte
Dim DISPLAYNEWLINE As Byte

Do

    HSerPrintCRLF
    HSerPrint "Hardware I2C "
    HSerPrintCRLF 2

    ' Now assumes Serial Terminal is operational
    HSerPrintCRLF
    HSerPrint "   "
    'Create a horizontal row of numbers
    For DeviceID = 0 To 15
        HSerPrint Hex(deviceID)
        HSerPrint " "
    Next

    'Create a vertical column of numbers
    For DeviceID = 0 To 255
        DisplayNewLine = DeviceID % 16
        If DisplayNewLine = 0 Then
            HSerPrintCRLF
            HSerPrint Hex(DeviceID)
            If DisplayNewLine > 0 Then
                HSerPrint " "
            End If
        End If
        HSerPrint " "

        'Do an initial Start
        SI2CDiscovery ( DeviceID )

        If HI2CWaitMSSPTimeout <> TRUE Then

            'Did device fail to respond?
            If HI2CAckpollState = FALSE Then
                HSerPrint   Hex(deviceID)
            Else
                HSerPrint "--"
            End If
            'Do a stop.


        Else
            HSerPrint "! "
        End If

    Next

    HSerPrintCRLF 2
    HSerPrint   "End of Search"
    HSerPrintCRLF 2
    Wait 1 s
    Wait While SwitchIn = Off
Loop

' ----- Support methods.  Subroutines and Functions
