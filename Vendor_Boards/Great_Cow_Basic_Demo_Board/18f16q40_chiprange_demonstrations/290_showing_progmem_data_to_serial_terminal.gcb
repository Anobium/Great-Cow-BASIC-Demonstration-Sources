'''
'''  This demonstration shows the PROGMEM on the Serial Terminal.
'''
''' This shows code for writing and reading values onto the PROGMEM or PFM.
'''
'''
''' If you read the chip and look at the memory locations 0xFFC0 to 0xFFFE - you will see the correct values.


'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.01
'''@date    02/01/2022
' ----- Configuration

'Chip Settings.
#CHIP 18F16Q40
#OPTION EXPLICIT


    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.6.2
    'PinManager data: Not available (3)
    'Generated for 18f16q40
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18f16q40

    Sub InitPPS

            'Module: UART pin directions
            Dir PORTC.6 Out    ' Make TX1 pin an output
            'Module: UART1
            RC6PPS = 0x0010    'TX1 > RC6

    End Sub
    'Template comment at the end of the config file



'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----------------SW---------------
''-----------------------------------------
''
'' ------------------PORTB-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----SCL-----SDA------------------
''-----------------------------------------
''
'' -------------------PORTC----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    -----TX-SW-LED--LED-LED LED-ADC--
''-----------------------------------------
''

'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDD1 PORTC.1
#DEFINE LEDD2 PORTC.2
#DEFINE LEDD3 PORTC.3
#DEFINE LEDD4 PORTC.4
#DEFINE LEDPORT LATC

Dir     LEDD1         Out
Dir     LEDD2         Out
Dir     LEDD3         Out
Dir     LEDD4         Out

#DEFINE POTENTIOMETER PORTC.0
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTC.5
Dir     SWITCHIN      In


'Setup Serial port
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_TX_BLOCKING


'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.
' Now assumes Serial Terminal is operational

Dim  PFMAddress, DataWord as Word

wait 1 s
HSerPrintCRLF 2

  'PFMReadWord


  'We are reading words, so we send the PFMAddress address every two bytes (a word).
  for PFMAddress = 0x0000 to 0x001F - 2 step 2  #IGNOREWARNING

      'Display the value
      HSerPrint "0x"
      HSerPrint hex(PFMAddress_h)
      HSerPrint hex(PFMAddress)
      HSerSend 9
      HSerSend 9

      'Read the value of the PFMAddress to the PFM
      'PFMRead  ( PFMAddress, DataWord )
      DataWord = PFMReadWord  ( PFMAddress)

      'Display the received value
      HSerPrint "0x"
      HSerPrint hex(DataWord_h)
      HSerPrint hex(DataWord)
      HSerPrintCRLF

  Next
  HSerPrintCRLF

'PFMWrite
  PFMWrite ( 0x00FFF0, 0x55 )
  PFMWrite ( 0x00FFFC, 0x1234 )

  'We are reading words, so we send the PFMAddress address every two bytes (a word).
  for PFMAddress = 0xFFF0 to 0xFFFF - 2 step 2 #IGNOREWARNING

      'Display the value
      HSerPrint "0x"
      HSerPrint hex(PFMAddress_h)
      HSerPrint hex(PFMAddress)
      HSerSend 9
      HSerSend 9

      'Read the value of the PFMAddress to the PFM
      PFMRead  ( PFMAddress, DataWord )
      'DataWord = PFMReadWord  ( PFMAddress)

      'Display the received value
      HSerPrint "0x"
      HSerPrint hex(DataWord_h)
      HSerPrint hex(DataWord)
      HSerPrintCRLF

  Next
  HSerPrintCRLF

do
loop
