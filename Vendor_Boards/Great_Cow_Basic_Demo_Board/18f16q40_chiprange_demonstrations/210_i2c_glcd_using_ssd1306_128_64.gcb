'''
'''This demonstration program is a simple GLCD demonstration of the SSD1306 GLCD capabilities.
'''
'''This program is a simple GLCD demonstration of the SSD1306 GLCD capabilities.
'''This program draws lines, boxes, circles and prints strings and numbers.
'''The SSD1306 controller a small graphical OLED, suitable for a lot of various projects.
'''The display is 38*35 mm, with an active display surface of 0.96inches, and a 128*64 pixel resolution.
'''The display is easy to interface, using an I2C type of communication.
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
'''
'''This version is compatible will all version of Great Cow BASIC as this demonstration uses Full Memory GLCD mode only.  This can be adapted to Low Memory GLCD mode.
'''
'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.01
'''@date    02/01/2022
' ----- Configuration


'Chip Settings.
#CHIP 18F16Q40
#OPTION EXPLICIT

    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.6.2
    'PinManager data: Not available (3)
    'Generated for 18f16q40
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18f16q40

    Sub InitPPS

            'Module: I2C1
            RB4PPS = 0x0022    'SDA1 > RB4
            I2C1SDAPPS = 0x000C    'RB4 > SDA1 (bi-directional)
            I2C1SCLPPS = 0x000E    'RB6 > SCL1
            RB6PPS = 0x0021    'SCL1 > RB6 (bi-directional)
            'Module: UART pin directions
            Dir PORTC.6 Out    ' Make TX1 pin an output
            'Module: UART1
            RC6PPS = 0x0010    'TX1 > RC6

    End Sub
    'Template comment at the end of the config file



'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----------------SW---------------
''-----------------------------------------
''
'' ------------------PORTB-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----SCL-----SDA------------------
''-----------------------------------------
''
'' -------------------PORTC----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    -----TX-SW-LED--LED-LED LED-ADC--
''-----------------------------------------
''

'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDD1 PORTC.1
#DEFINE LEDD2 PORTC.2
#DEFINE LEDD3 PORTC.3
#DEFINE LEDD4 PORTC.4
#DEFINE LEDPORT LATC

Dir     LEDD1         Out
Dir     LEDD2         Out
Dir     LEDD3         Out
Dir     LEDD4         Out

#DEFINE POTENTIOMETER PORTC.0
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTC.5
Dir     SWITCHIN      In

'Setup Serial port
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_TX_BLOCKING


' Define I2C settings
#DEFINE HI2C_BAUD_RATE 100
#DEFINE HI2C_DATA PORTB.4
#DEFINE HI2C_CLOCK PORTB.6
'Initialise I2C - note for the I2C module the ports need to be set to OUT
Dir HI2C_DATA Out
Dir HI2C_CLOCK Out


#INCLUDE <glcd.h>
#DEFINE GLCD_TYPE GLCD_TYPE_SSD1306
#DEFINE GLCD_I2C_Address 0x78

' ----- Define variables

'These constants allow you to change the GLCD memory usage.
#DEFINE GLCD_PROTECTOVERRUN

' ----- Define variables

Dim BYTENUMBER, CCOUNT As Byte

CCount = 0
Dim longNumber As Long
' max value = 4294967290
longNumber = 123456
Dim wordNumber As Word
Dim outstring As String
wordNumber = 0
byteNumber = 0

' ----- Main program

GLCDPrint 0, 0,   "Great Cow BASIC"
GLCDPrint (0, 16, "Anobium 2022")
GLCDPrint (0, 32, "Portability Demo")
GLCDPrint (0, 48, ChipNameStr )


Wait 3 s
GLCDCLS

' Prepare the static components of the screen
' Print some text
GLCDPrint ( 0,   0, "PrintStr")
' Print some more text
GLCDPrint ( 64,  0, "@")
' Print chip speed
GLCDPrint ( 72,  0, ChipMHz)
' Print some text
GLCDPrint ( 86, 0, "Mhz")
' Draw some text
GLCDDrawString( 0,8,"DrawStr")
' Draw a box
Box 0,0,GLCD_WIDTH-1, GLCD_HEIGHT-1
' Draw a box
Box GLCD_WIDTH-5, GLCD_HEIGHT-5,GLCD_WIDTH-1, GLCD_HEIGHT-1
' Draw a circle
Circle (44,41,15)
' Draw a line
Line 64,31,0,31

Do Forever

    For CCount = 31 To 127

        ' Print a HEX string
        GLCDPrint ( 64 ,  36,  Hex(longNumber_E ) )
        ' Print a HEX string
        GLCDPrint ( 76 ,  36,  Hex(longNumber_U ) )
        ' Print a HEX string
        GLCDPrint ( 88 ,  36,  Hex(longNumber_H ) )
        ' Print a HEX string
        GLCDPrint ( 100 ,  36, Hex(longNumber   ) )
        ' Print a HEX string
        GLCDPrint ( 112 ,  36, "h" )


        ' Print a padded string
        GLCDPrint ( 64 ,  44, Pad(Str(wordNumber), 5 ) )
        ' Print a padded string
        GLCDPrint ( 64 ,  52, Pad(Str(byteNumber), 3 ) )


        ' Draw a Box
        Box (46,9,56,19)
        ' Draw a character
        GLCDDrawChar(48, 10, CCount )
        ' Prepare a string
        outString = Str( CCount )
        ' Draw a string
        GLCDDrawString(64, 9, Pad(outString,3) )

        ' Draw a filled box
        FilledBox 3,43,11,51, wordNumber

        ' Draw a filled box
        FilledCircle( 44,41,9, longNumber XOR 1)
        ' Draw a line
        Line 0,63,64,31

        ' Do some simple maths
        longNumber = longNumber + 7 : wordNumber = wordNumber + 3 : byteNumber++
    Next
Loop
End
