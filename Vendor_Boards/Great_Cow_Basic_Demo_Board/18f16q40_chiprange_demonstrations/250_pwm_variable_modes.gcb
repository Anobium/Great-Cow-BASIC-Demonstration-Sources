'''
'''This program shows how to use PWM to provide 250Hz at 50% for 16Khz chip frequency
'''
'''@author     EvanV
'''@licence    GPL
'''@version    1.01
'''@date       02/01/2022
'''********************************************************************************
#CHIP 18F16Q40, 16
#OPTION EXPLICIT


    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.6.1
    'PinManager data: v1.79.0
    'Generated for 18F16Q40
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18F16Q40

    Sub InitPPS

        PWMIN1PPS = 0x13;   //RC3->PWM1_16BIT:PWMIN1;
        PWMIN0PPS = 0x15;   //RC5->PWM1_16BIT:PWMIN0;
        RC1PPS = 0x0A;      //RC1->PWM1_16BIT:PWM11;

    End Sub
    'Template comment at the end of the config file



'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----------------SW---------------
''-----------------------------------------
''
'' ------------------PORTB-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----SCL-----SDA------------------
''-----------------------------------------
''
'' -------------------PORTC----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    -----TX-SW-LED--LED-LED LED-ADC--
''-----------------------------------------
''

'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDD1 PORTC.1
#DEFINE LEDD2 PORTC.2
#DEFINE LEDD3 PORTC.3
#DEFINE LEDD4 PORTC.4
#DEFINE LEDPORT LATC

Dir     LEDD1         Out
Dir     LEDD2         Out
Dir     LEDD3         Out
Dir     LEDD4         Out

#DEFINE POTENTIOMETER PORTC.0
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTC.5
Dir     SWITCHIN      In


' ------ Start of main Program to provide 250Hz at 50% for 16Khz chip frequency

    //PWMERS External Reset Disabled;
    PWM1ERS = 0x00;

    //PWMCLK FOSC;
    PWM1CLK = 0x02;

    //PWMLDS Autoload disabled;
    PWM1LDS = 0x00;

    //PWMPRL 255;
    PWM1PRL = 0xFF;

    //PWMPRH 249;
    PWM1PRH = 0xF9;

    //PWMCPRE No prescale;
    PWM1CPRE = 0x00;

    //PWMPIPOS No postscale;
    PWM1PIPOS = 0x00;

    //PWMS1P2IF PWM2 output match did not occur; PWMS1P1IF PWM1 output match did not occur;
    PWM1GIR = 0x00;

    //PWMS1P2IE disabled; PWMS1P1IE disabled;
    PWM1GIE = 0x00;

    //PWMPOL2 disabled; PWMPOL1 disabled; PWMPPEN disabled; PWMMODE Left aligned mode;
    PWM1S1CFG = 0x00;

    //PWMS1P1L 0;
    PWM1S1P1L = 0x00;

    //PWMS1P1H 125;
    PWM1S1P1H = 0x7D;

    //PWMS1P2L 0;
    PWM1S1P2L = 0x00;

    //PWMS1P2H 125;
    PWM1S1P2H = 0x7D;

    //Clear PWM1_16BIT period interrupt flag
    PIR4.PWM1PIF = 0;

    //Clear PWM1_16BIT interrupt flag
    PIR4.PWM1IF = 0;

    //Clear PWM1_16BIT slice 1, output 1 interrupt flag
    PWM1GIR.S1P1IF = 0;

    //Clear PWM1_16BIT slice 1, output 2 interrupt flag
    PWM1GIR.S1P2IF = 0;

    //PWM1_16BIT interrupt enable bit
    PIE4.PWM1IE = 0;

    //PWM1_16BIT period interrupt enable bit
    PIE4.PWM1PIE = 0;


    //PWMEN enabled; PWMLD disabled; PWMERSPOL disabled; PWMERSNOW disabled;
    PWM1CON = 0x80;

    Do
    Loop

    End
