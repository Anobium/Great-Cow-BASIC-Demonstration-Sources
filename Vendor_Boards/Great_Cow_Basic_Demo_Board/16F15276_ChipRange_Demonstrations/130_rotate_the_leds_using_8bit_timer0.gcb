'''
'''  This demonstration flashes an LED to show the use of an 8Bit Timer 0
'''
'''  Timer0 is a counter implemented in the processor. It may be used to count instruction
'''  cycles or external events, that occur at or below the instruction cycle rate.
'''  In the PIC18, Timer0 can be used as either an 8-bit or 16-bit counter, or timer. The
'''  enhanced mid-range core implements only an 8-bit counter.
'''
'''  This lesson configures Timer0 to count instruction cycles and to set a flag when it rolls
'''  over. This frees up the processor to do meaningful work rather than wasting instruction
'''  cycles in a timing loop.
'''  Using a counter provides a convenient method of measuring time or delay loops as it
'''  allows the processor to work on other tasks rather than counting instruction cycles.
'''
'''
'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.01
'''@date    31.12.2021
' ----- Configuration

'Chip Settings.
#CHIP 16F15276, 16
#OPTION Explicit

'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:   ---------------------SW------ADC--
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------LED--LED-LED LED--
''-----------------------------------------

'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDPORT LATC

Dir     RC0         Out
Dir     RC1         Out
Dir     RC2         Out
Dir     RC3         Out

#DEFINE POTENTIOMETER PORTA.0
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTA.2
Dir     SWITCHIN      In

'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.



'     For this we need the following:
'       Prescaler with the FOSC/4
'       Prescaler with the FOSC/4 with a post scaler
'           1:256
'           1:1 which is the constant POST0_1

InitTimer0 Osc, PRE0_256 + TMR0_FOSC4 ,  POST0_1

'   Start the Timer
StartTimer 0

'Every 10 msec, we will count 100 to make 1 second
SetTimer ( 0 , 0x9C  )

'we will use this to count the number of times the event happens
Dim TimerCounter As Byte
TimerCounter = 0


'Set the initial LED states - change to suit your configuration - same as previous demonstrations
#DEFINE LEDSTATEMACRO RC0 = 0: RC1 = 0: RC2 = 0: RC3 = 1
'You may need change to the LEDMASK to suit your port/configuration.  We use a macro as re reuse this statement more that once.
#DEFINE LEDMASK 0B00001111
LEDSTATEMACRO


    Do
        'wait for the event
        Wait While TMR0IF = 0
        ' Clearing Timer flag will reset event
        TMR0IF = 0

        TimerCounter = TimerCounter + 1

        'When at 100 we are at 1 s
        If TimerCounter = 100 Then

            'Rotate the LEDs.  We are only interested in the four LEDs so we mask the other bits.
            Set C Off
            ' and shift the contents of LEDState
            Rotate LEDPORT Right
            ' If C = to 1 then the sequence has completed, then set the initial state again, the same operation as the starting LED.
            If C = 1 Then
                'Set the initial LED states
                LEDSTATEMACRO
                'Mask off the other bits
                LEDPORT = LEDPORT AND LEDMASK
            End If

            'restart our event counter
            TimerCounter = 0

        End If

        ' Set the Timer start value
        SetTimer ( 0 , 0x9C  )

    Loop
