'''
''' This shows how to read the A2D converter and display the a proportioanal value on the LEDs.
''' The pot on the board varies the voltage coming in on the microcontroller.
'''
''' Rotate the POT to see the LEDs change.
'''
''' The A2D is referenced to the same Vdd as the device, which
''' is nominally is 5V.  The A2D returns the ratio of the voltage
''' on Pin RA0 to 5V.  The A2D has a resolution of 8 bits, with 255
''' representing 5V and 0 representing 0V.
'''
'''
''' Rotate the potentiometer to change the LEDs displayed.
'''
'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.01
'''@date    31.12.2021
' ----- Configuration

'Chip Settings.
#CHIP 16F15256
#OPTION Explicit

'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:   -----------------------------ADC--
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------LED--LED-LED-LED--
''-----------------------------------------
''

'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDPORT LATC

#DEFINE POTENTIOMETER RA0

Dir     RC0         Out
Dir     RC1         Out
Dir     RC2         Out
Dir     RC3         Out

'This is the PORTA.0 port
Dir     POTENTIOMETER In


'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.

  Dim adcVal As Byte

  Do

      adcVal = ReadAD ( AN0 )

      Select Case adcVal

          Case 0 to 49

              RC0 = 0
              RC1 = 0
              RC2 = 0
              RC3 = 0

          Case 50 to 99
              RC0 = 1
              RC1 = 0
              RC2 = 0
              RC3 = 0

          Case 100 to 149
              RC0 = 1
              RC1 = 1
              RC2 = 0
              RC3 = 0

          Case 150 to 200
              RC0 = 1
              RC1 = 1
              RC2 = 1
              RC3 = 0

          Case Else
              RC0 = 1
              RC1 = 1
              RC2 = 1
              RC3 = 1

      End Select


'  Or, another way
'
'      If adcVal < 49 then
'              RC1 = 0
'              RC2 = 0
'              RC3 = 0
'              RC4 = 0
'
'      else if adcVal > 49 and adcVal < 100 then
'              RC1 = 1
'              RC2 = 0
'              RC3 = 0
'              RC4 = 0
'
'      else if adcVal > 100 and adcVal < 150 then
'              RC1 = 1
'              RC2 = 1
'              RC3 = 0
'              RC4 = 0
'
'      else if adcVal > 150 and adcVal < 200 then
'              RC1 = 1
'              RC2 = 1
'              RC3 = 1
'              RC4 = 0
'
'      else if adcVal > 200 then
'              RC1 = 1
'              RC2 = 1
'              RC3 = 1
'              RC4 = 1
'      End if

      wait 100 ms
  Loop

''' GCB Optimisation file

'Optmise PWM.h
    #define USE_HPWMCCP1 FALSE
    #define USE_HPWMCCP2 FALSE
    #define USE_HPWMCCP3 FALSE
    #define USE_HPWMCCP4 FALSE
    #define USE_HPWMCCP5 FALSE

    #define USE_HPWM1 FALSE
    #define USE_HPWM2 FALSE
    #define USE_HPWM3 FALSE
    #define USE_HPWM4 FALSE
    #define USE_HPWM5 FALSE
    #define USE_HPWM6 FALSE
    #define USE_HPWM7 FALSE
    #define USE_HPWM8 FALSE

    #define USE_HPWM_TIMER2 FALSE
    #define USE_HPWM_TIMER4 FALSE
    #define USE_HPWM_TIMER6 FALSE

'Optimise A-d.h
  'Standard family chips
    #define USE_AD0 TRUE
    #define USE_AD1 FALSE
    #define USE_AD2 FALSE
    #define USE_AD2 FALSE
    #define USE_AD3 FALSE
    #define USE_AD4 FALSE
    #define USE_AD5 FALSE
    #define USE_AD6 FALSE
    #define USE_AD7 FALSE
    #define USE_AD8 FALSE
    #define USE_AD9 FALSE
    #define USE_AD10 FALSE
    #define USE_AD11 FALSE
    #define USE_AD12 FALSE
    #define USE_AD13 FALSE
    #define USE_AD14 FALSE
    #define USE_AD15 FALSE
    #define USE_AD16 FALSE
    #define USE_AD17 FALSE
    #define USE_AD18 FALSE
    #define USE_AD19 FALSE
    #define USE_AD20 FALSE
    #define USE_AD21 FALSE
    #define USE_AD22 FALSE
    #define USE_AD23 FALSE
    #define USE_AD24 FALSE
    #define USE_AD25 FALSE
    #define USE_AD26 FALSE
    #define USE_AD27 FALSE
    #define USE_AD28 FALSE
    #define USE_AD29 FALSE
    #define USE_AD30 FALSE
    #define USE_AD31 FALSE
    #define USE_AD32 FALSE
    #define USE_AD33 FALSE
    #define USE_AD34 FALSE

    'Family of chips based on 16f1688x with ADCON3 register
    #define USE_ADA0 FALSE
    #define USE_ADA1 FALSE
    #define USE_ADA2 FALSE
    #define USE_ADA3 FALSE
    #define USE_ADA4 FALSE
    #define USE_ADA5 FALSE
    #define USE_ADA6 FALSE
    #define USE_ADA7 FALSE
    #define USE_ADB0 FALSE
    #define USE_ADB1 FALSE
    #define USE_ADB2 FALSE
    #define USE_ADB3 FALSE
    #define USE_ADB4 FALSE
    #define USE_ADB5 FALSE
    #define USE_ADB6 FALSE
    #define USE_ADB7 FALSE
    #define USE_ADC0 FALSE
    #define USE_ADC1 FALSE
    #define USE_ADC2 FALSE
    #define USE_ADC3 FALSE
    #define USE_ADC4 FALSE
    #define USE_ADC5 FALSE
    #define USE_ADC6 FALSE
    #define USE_ADC7 FALSE
    #define USE_ADD0 FALSE
    #define USE_ADD1 FALSE
    #define USE_ADD2 FALSE
    #define USE_ADD3 FALSE
    #define USE_ADD4 FALSE
    #define USE_ADD5 FALSE
    #define USE_ADD6 FALSE
    #define USE_ADD7 FALSE
    #define USE_ADE0 FALSE
    #define USE_ADE1 FALSE
    #define USE_ADE2 FALSE
