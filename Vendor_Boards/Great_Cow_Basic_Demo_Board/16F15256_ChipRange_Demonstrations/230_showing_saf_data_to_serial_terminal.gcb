 '''
'''  This demonstration shows the SAF values on the Serial Terminal.
'''
''' This lesson will provide code for writing and reading values onto
''' the on-board SAF. SAF is non-volatile memory, meaning that it does
''' not lose its value when power is shut off. This is unlike RAM, which will
''' lose its value when no power is applied. The SAF is useful for storing
''' variables that must still be present during no power.
''' It is also convenient to use if the entire RAM space is used up.

''' This will show the value of the SAF on the serial Terminal.
'''
''' There are several system Constants available for use with SAF. These are:
'''
'''   SAF_BYTES                 The number of Bytes of SAF Memory
'''   SAF_ROWSIZE_BYTES         The number of Bytes in a Block of SAFM
'''   SAF_NUM_BLOCKS            The number blocks of SAFM  (Either 2 or 4)
'''   SAF_START_ADDRESS         The Absolute Address of the Start of SAFM
'''   SAF_BLOCK0_ADDR           The Absolute Address of the Start of SAF Block 0
'''   SAF_BLOCK1_ADDR           The Absolute Address of the Start of SAF Block 1
'''   SAF_BLOCK2_ADDR           The Absolute Address of the Start of SAF Block 2
'''   SAF_BLOCK3_ADDR           The Absolute Address of the Start of SAF Block 3
'''
'''  The most useful of these is  SAF_ROWSIZE_BYTES.  This constant should be
'''  used to size the necessary buffer array used with SAF commands
'''
'''      Example:  Dim MyBufffer(SAF_ROWSIZE_BYTES)
'''
'''  Sometimes it may be necessary to know the SAF block  and offset where
'''  a relative address resides. This can be calculated as follows:
'''
'''      Block number = relative address / SAF_ROWSIZE_BYTES
'''
'''      offset =  relative address % SAF_ROWSIZE_BYTES
'''
'''     Example:
'''
'''    Relative address = 184
'''
'''    Blocknum = 184 /  64  =  2   (integer math)
'''    offset =   184 %  64  =  56  (Modulo divide)
'''
'''   So a byte of data stored in rel address 184 is
'''   located in the 56th  location of block 2

'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.01
'''@date    31.12.2021
' ----- Configuration

'Chip Settings.
#CHIP 16F15256
#OPTION Explicit

    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.6.2
    'PinManager data: Not available (3)
    'Generated for 16F15256
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 16F15256

    Sub InitPPS

            'Module: EUSART1
            RC6PPS = 0x0005    'TX1 > RC6

    End Sub
    'Template comment at the end of the config file


'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:   -----------------SW----------ADC--
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----TX---------LED--LED-LED LED--
''-----------------------------------------



'Setup Serial port
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_TX_BLOCKING




'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.
' Now assumes Serial Terminal is operational


  Dim Rel_Address, numbytes, DataByte, Index as Byte
  Dim NVM_Address as Long  ' Absolute Address
  Dim DataWord as Word
  Dim IndexWord as Word
  Dim MyBuffer(SAF_ROWSIZE_BYTES)

  Wait 200 ms 'Stabilize

' ------- Main Program Starts Here --------------

 ''' Store 8 Bytes of Data in SAF Memory using SAFWriteBlock
 ''' MyBuffer is sized using the system constant SAF_ROWSIZE_BYTES
 '''------------------------------------------------------------------

  'Write  8 Bytes of data into the buffer/array
  MyBuffer = 0x20, 0x2C, 0x58, 0x5B,  0x4D, 0x4E, 0x3F, 0x63

  'Write the 8 bytes to SAF Block 0
    numbytes = 8
    HSerPrintCRLF 2
    HSerPrint "Buffer test: Three lines should read the same."
    HSerPrintCRLF 1
    HSerPrint "Buffer being sent to SAF        : "
    For index = 1 to numbytes
        Hserprint "0x"
        HSerPrint hex(MyBuffer(index))
        Hsersend 32 'space
    Next

    SAFWriteBlock (0, MyBuffer, numbytes)

    'Clear the buffer
    For IndexWord = 0 to SAF_ROWSIZE_BYTES-1
      MyBuffer(IndexWord) = 0xFF
    Next

    '*** Read the 8 stored bytes using SAFReadBlock ***
    SAFReadBlock (0, MyBuffer, numbytes)

   'Output the 8 bytes to a terminal
    HSerPrintCRLF
    HSerPrint "Buffer being read back from SAF : "
    For index = 1 to numbytes
        Hserprint "0x"
        Hserprint hex(MyBuffer(index))
        Hsersend 32 'space
    Next



   ' *** Read the stored bytes using SAFRead ***
   ' The relative memory address or location is
   ' offset by 1 relative to the buffer address

    HserprintCRLF
    HSerPrint "Direct read to SAF address      : "
    For rel_address = 0 to 3
        SAFRead (Rel_Address, Databyte)
        Hserprint "0x"+hex(DataByte)
        hsersend 32 'space
    Next

    HserprintCRLF 2

    HSerPrint "SAF Dump "
    SAFM_Dump

'=========================================================

 ''' Store 4 Words  of Data in SAF Memory using SAFWrite
 '''------------------------------------------------------
  Dim Word1, Word2, Word3, Word4 as Word
  Word1 = 0x5BAF
  Word2 = 0x1F0
  Word3 = 0xD271
  Word4 = 0x4321

  HserprintCRLF 2
  HSerPrint "Send word to address x08 - 0x0C - should be same"

  HserprintCRLF
  HSerprint "0x"+hex(Word1_h)
  HSerprint      hex(Word1)
  HSerSend 32
  HSerprint "0x"+hex(Word2_h)
  HSerprint      hex(Word2)
  HSerSend 32
  HSerprint "0x"+hex(Word3_h)
  HSerprint      hex(Word3)
  HSerSend 32
  HSerprint "0x"+hex(Word4_h)
  HSerprint      hex(Word4)
  HSerSend 32



  'Write the words staring at saf location 8
  'Which is the next address past the 8 bytes
  SAFwriteWord (8, Word1)   ' use even numbered adresses
  SAFwriteWord (10, Word2)
  SAFwriteWord (12, Word3)
  SAFwriteWord (14, Word4)

  'Read the Words using SAFReadWord & output to terminal
  Rel_Address = 8
  HserprintCRLF
  Repeat 4
      SAFReadWord(Rel_Address, DataWord)
      HSerprint "0x"+hex(DataWord_h)
      HSerprint      hex(DataWord)
      Hsersend 32
      Rel_Address +=2  'increment address by 2
  End repeat
  HSerprintCRLF 2
  SAFM_DUMP

'=========================================================
  end



'
'; This subroutine displays the SAF Flash Memory on a terminal
'; Words in reverse byte order relative to address
sub SAFM_Dump

    Dim Blocknum as Byte
    NVM_Address  = SAF_START_ADDR
    BlockNum = 0

    Repeat 64
        If NVM_Address % SAF_ROWSIZE_BYTES = 0 then
           If BlockNum > 0 then   HSERPRINTCRLF
           HSerprintCRLF

           HserPrint "Block"
           HSerprint BlockNum
           HSerprint "  1 0   3 2   5 4   7 6"
           BlockNum++
        End if

        IF NVM_Address  % 8 = 0 then
           HSerPrintCRLF
           hserprint hex(NVM_Address_H)
           hserprint hex(NVM_Address)
           hserprint "    "
        end if

        Rel_Address = NVM_ADDRESS - SAF_START_ADDR
        SAFReadWord(Rel_Address,DataWord)

        hserprint hex(DataWord_H)
        hserprint hex(DataWord)
        hserprint "  "

        NVM_Address+=2 ' Next "WORD"
    End Repeat

 HserPrintCRLF

End sub
