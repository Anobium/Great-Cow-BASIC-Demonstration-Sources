'''
'''  This demonstration produces a variable speed rotating LED display that is proportional to the ADC value.
'''  The ADC value and LED rotate speed are  proportional to each other.
'''
'''  The demonstration also introduces the PERIPHERAL PIN SELECT (PPS) MODULE.  We have created the Serial PPS settings for you on Port specified below and CCP/PWM on the LEDs.
'''
'''  Rotate the POT to see the LEDs shift faster, and press the switch to reverse the direction of the LEDs.
'''
'''  The Serial port shows the value of the ADC and the direction!
'''
'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.02
'''@date    09.07.2020
' ----- Configuration

'Chip Settings.
#CHIP 18F27Q84
#OPTION Explicit
'This Configuration change is needed to enable programming in Low Voltage Programming Mode


    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.6.2
    'PinManager data: Not available (3)
    'Generated for 18f27q84
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18f27q84

    Sub InitPPS

            'Module: UART pin directions
            Dir PORTC.6 Out    ' Make TX1 pin an output
            'Module: UART1
            RC6PPS = 0x0020    'TX1 > RC6

    End Sub
    'Template comment at the end of the config file



'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    --------IN-LED--LED-LED LED -----
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----TX---------------------------
''-----------------------------------------
''

'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDD1 PORTB.1
#DEFINE LEDD2 PORTB.2
#DEFINE LEDD3 PORTB.3
#DEFINE LEDD4 PORTB.4
#DEFINE LEDPORT LATB


Dir     LEDD1         Out
Dir     LEDD2         Out
Dir     LEDD3         Out
Dir     LEDD4         Out

#DEFINE POTENTIOMETER PORTA.0
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTB.5
Dir     SWITCHIN      In

'USART settings - setup the serial port - connects to PortC.6 via PPS
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_TX_BLOCKING



'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.

#DEFINE DOWN        0
#DEFINE UP          1


Dim direction As Byte
Dim mydelay, leds  As Byte
#DEFINE LED_RIGHT 0
#DEFINE LED_LEFT  1
'start from the right to left
direction = LED_RIGHT

'Set the initial LED states - change to suit your configuration
#DEFINE LEDSTATEMACRO LEDD1 = 0: LEDD2 = 0: LEDD3 = 0: LEDD4 = 1
#DEFINE LEDMASK = 0x1111000
leds = 0b10000

HSerPrintCRLF
HSerPrint "Great Cow BASIC 2022 "
HSerPrint ChipNameStr
HSerPrint " at "
HSerPrint ChipMHz
HSerPrint "mHz"
HSerPrintCRLF

Do

    'Turn the LEDS off so we can see them Flash
    LEDD1 = 0
    LEDD2 = 0

    'Get a value for the ADC port
    mydelay = ReadAD( AN0 )

    'Show state
    If direction = LED_RIGHT Then
        HSerPrint ">> "
    Else
        HSerPrint "<< "
    End If

    HSerPrint mydelay
    HSerPrintCRLF

    mydelay = scale( mydelay, 0, 255, 1, 200 )

    'Set the LEDs
    If  direction = LED_RIGHT  Then
        'Rotate the LEDs.  We are only interested in the four LEDs so we mask the other bits.
        Set C Off
        ' and shift the contents of LEDState
        Rotate leds Right
        ' If the LEDState.0is equal to 1 then the sequence has completed, then set the initial state again, the same operation as the starting LED.
        If C = 1 Then
            leds = 16
        End if
        LEDPORT = ( LEDPORT and LEDMASK ) or leds

    Else
        'Rotate the LEDs.  We are only interested in the four LEDs so we mask the other bits.
        Set C Off
        ' and shift the contents of LEDState
        Rotate leds Left
        ' If the LEDState.0is equal to 1 then the sequence has completed, then set the initial state again, the same operation as the starting LED.
        If leds = 32 Then
            'Mask off the other bits
            leds = 1
        End If
        LEDPORT = ( LEDPORT and LEDMASK ) or leds


    End If

    'wait, and then check the switch is DOWN
    If mydelay > 0 Then
        Wait mydelay ms
        If check_switch = TRUE Then
            ' toggle the direction
            direction = !direction
        End If
    End If


Loop



'global variable - if button is held down, we don't want to keep on switching directions
#DEFINE SWITCH_UP   1
#DEFINE SWITCH_DOWN 0

Dim previous_state As BIT
previous_state = SWITCH_UP

Function  check_switch
    'switch is normally open to 5V ...when pressed, RA3 is connected to GND
    If (SwitchIn = SWITCH_DOWN) Then
        'debounce by delaying and checking if switch is still pressed
        Wait 1 ms
        If ( (previous_state =  SWITCH_DOWN) & (SwitchIn = SWITCH_DOWN) ) Then
            ' don't toggle
            check_switch = FALSE
            Exit Function
        Else
            ' check if still down
            If (SwitchIn = SWITCH_DOWN) Then
                previous_state = SWITCH_DOWN
                ' reverse the LEDs
                check_switch = TRUE
                Exit Function
            Else
                'switch not properly held down
                previous_state = SWITCH_UP
                ' don't reverse
                check_switch = FALSE
                Exit Function
            End If
        End If
    Else
        'switch not pressed
        previous_state = SWITCH_UP
        'don't reverse
        check_switch = FALSE
        Exit Function
    End If

End Function
