'''
'''  This demonstration flashes an LED to show the use of an 8Bit Timer 0
'''
'''  Timer0 is a counter implemented in the processor. It may be used to count instruction
'''  cycles or external events, that occur at or below the instruction cycle rate.
'''  In the PIC18, Timer0 can be used as either an 8-bit or 16-bit counter, or timer. The
'''  enhanced mid-range core implements only an 8-bit counter.
'''
'''  This lesson configures Timer0 to count instruction cycles and to set a flag when it rolls
'''  over. This frees up the processor to do meaningful work rather than wasting instruction
'''  cycles in a timing loop.
'''  Using a counter provides a convenient method of measuring time or delay loops as it
'''  allows the processor to work on other tasks rather than counting instruction cycles.
'''
'''
'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.01
'''@date    01/01/2022
' ----- Configuration

'Chip Settings.
#CHIP 18F27Q84, 16
#OPTION Explicit
'This Configuration change is needed to enable programming in Low Voltage Programming Mode


'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    --------IN-LED--LED-LED LED -----
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----TX---------------------------
''-----------------------------------------
''

'' ------------------PORTE-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----------------RST--------------
''-----------------------------------------
''

'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDD1 PORTB.1
#DEFINE LEDD2 PORTB.2
#DEFINE LEDD3 PORTB.3
#DEFINE LEDD4 PORTB.4
#DEFINE LEDPORT LATB


Dir     LEDD1         Out
Dir     LEDD2         Out
Dir     LEDD3         Out
Dir     LEDD4         Out

#DEFINE POTENTIOMETER PORTA.0
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTB.5
Dir     SWITCHIN      In

'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.



'     For this we need the following:
'       Prescaler with the FOSC/4
'       Prescaler with the FOSC/4 with a post scaler
'           1:256
'           1:1 which is the constant POST0_1

InitTimer0 Osc, PRE0_256 + TMR0_FOSC4 ,  POST0_1

'   Start the Timer
StartTimer 0

'Every 100 msec, we will count 100 to make 1 second
SetTimer ( 0 , 0xB1  )

'we will use this to count the number of times the event happens
Dim TimerCounter As Byte
TimerCounter = 0


'Set the initial LED states - change to suit your configuration - same as previous demonstrations
#DEFINE LEDSTATEMACRO LEDD1 = 0: LEDD2 = 0: LEDD3 = 0: LEDD4 = 1
'You may need change to the LEDMASK to suit your port/configuration.  We use a macro as re reuse this statement more that once.
#DEFINE LEDMASK 0B00011110
LEDSTATEMACRO


Do
    'wait for the event
    Wait While TMR0IF = 0
    ' Clearing Timer flag will reset event
    TMR0IF = 0

    TimerCounter = TimerCounter + 1

    'When at 100 we are at 1 s
    If TimerCounter = 100 Then

        'Rotate the LEDs.  We are only interested in the four LEDs so we mask the other bits.
        Set C Off
        ' and shift the contents of LEDState
        Rotate LEDPORT Right
        ' If the LEDState.0is equal to 1 then the sequence has completed, then set the initial state again, the same operation as the starting LED.
        If LEDPORT.0 = 1 Then
            'Set the initial LED states
            LEDSTATEMACRO
            'Mask off the other bits
            LEDPORT = LEDPORT AND LEDMASK
        End If

        'restart our event counter
        TimerCounter = 0

    End If

    ' Set the Timer start value
    SetTimer ( 0 , 0xB1  )

Loop
